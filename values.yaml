image:
  registry: docker.io
  repository: bitnami/mongodb
  tag: 4.2.8-debian-10-r20
  pullPolicy: IfNotPresent
  debug: false

clusterDomain: cluster.local
architecture: standalone
useStatefulSet: false

auth:
  enabled: true
  rootPassword: ""
  existingSecret: mongo-mongodb

replicaSetName: rs0

## Enable DNS hostnames in the replica set config
## Ignored when mongodb.architecture=standalone
## Ignored when externalAccess.enabled=true
##
replicaSetHostnames: true

enableIPv6: false
directoryPerDB: false
systemLogVerbosity: 0
disableSystemLog: false

configuration:
  # where and how to store data.
  storage:
    dbPath: /bitnami/mongodb/data/db
    journal:
      enabled: true
      commitIntervalMs: 200
    directoryPerDB: false
    engine: wiredTiger
    wiredTiger:
      engineConfig:
        cacheSizeGB: 0.9
        journalCompressor: zstd
        directoryForIndexes: false
        maxCacheOverflowFileSizeGB: 0
      collectionConfig:
        blockCompressor: zstd
      indexConfig:
        prefixCompression: true
    inMemory:
      engineConfig:
        inMemorySizeGB: 0.9
  # where to write logging data.
  systemLog:
    destination: file
    quiet: false
    logAppend: false
    logRotate: rename
    path: /opt/bitnami/mongodb/logs/mongodb.log
    verbosity: 0
  # network interfaces
  net:
    port: 27017
    compression:
      compressors: zstd
    unixDomainSocket:
      enabled: true
      pathPrefix: /opt/bitnami/mongodb/tmp
    ipv6: false
    bindIpAll: true
  # process management options
  processManagement:
    fork: false
    pidFilePath: /opt/bitnami/mongodb/tmp/mongodb.pid
  # set parameter options
  setParameter:
    enableLocalhostAuthBypass: true
  # security options
  security:
    authorization: enabled
    #keyFile: /opt/bitnami/mongodb/conf/keyfile


## initdb scripts
## Specify dictionary of scripts to be run at first boot
## Example:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/bash
##      echo "Do something."
initdbScripts: {}

## Command and args for running the container (set to default if not set). Use array form
##
# command:
# args:

## Additional command line flags
## Example:
## extraFlags:
##  - "--wiredTigerCacheSizeGB=2"
##
extraFlags: []

## Additional environment variables to set
## E.g:
## extraEnvVars:
##   - name: FOO
##     value: BAR
##
extraEnvVars: []

## ConfigMap with extra environment variables
##
# extraEnvVarsCM:

## Secret with extra environment variables
##
# extraEnvVarsSecret:


annotations: {}
labels: {}
replicaCount: 2
strategyType: Recreate
podManagementPolicy: OrderedReady
affinity: {}
nodeSelector: {}
tolerations: []
podLabels: {}
podAnnotations: {}

podSecurityContext:
  enabled: true
  fsGroup: 1001
  sysctls: {}


containerSecurityContext:
  enabled: true
  runAsUser: 1001

resources:
  limits: {}
  #   cpu: 100m
  #   memory: 128Mi
  requests: {}
  #   cpu: 100m
  #   memory: 128Mi


livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1


customLivenessProbe: {}
customReadinessProbe: {}
initContainers: {}
sidecars: {}
extraVolumeMounts: []
extraVolumes: []

pdb:
  create: false
  minAvailable: 1
  # maxUnavailable: 1

persistence:
  enabled: true
  storageClass: mongo-xfs
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}
  mountPath: /bitnami/mongodb
  subPath: ""


service:
  type: LoadBalancer
  port: 27017
  nodePort: 30123
  # clusterIP: None
  externalIPs: []
  loadBalancerIP: 35.228.64.115
  loadBalancerSourceRanges: []
  annotations: {}


externalAccess:
  enabled: false
  ## External IPs auto-discovery configuration
  ## An init container is used to auto-detect LB IPs or node ports by querying the K8s API
  ## Note: RBAC might be required
  ##
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.18.3-debian-10-r12
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      #   cpu: 100m
      #   memory: 128Mi
      requests: {}
      #   cpu: 100m
      #   memory: 128Mi
  ## Parameters to configure K8s service(s) used to externally access Kafka brokers
  ## A new service per broker will be created
  ##
  service:
    type: LoadBalancer
    port: 27017
    loadBalancerIPs: []
    loadBalancerSourceRanges: []
    nodePorts: []
    annotations: {}


arbiter:
  configuration: ""
  extraFlags: []
  extraEnvVars: []
  annotations: {}
  labels: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    sysctls: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: {}
  sidecars: {}
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: false
    minAvailable: 1

serviceAccount:
  create: true
rbac:
  ## Specifies whether RBAC rules should be created
  ## binding Kafka ServiceAccount to a role
  ## that allows Kafka pods querying the K8s API
  ##
  create: false

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
    pullSecrets: []
  resources:
    limits: {}
    requests: {}


metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.11.0-debian-10-r69
    pullPolicy: IfNotPresent
  extraFlags: ""
  resources:
    limits: {}
    requests: {}
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
      prometheus.io/path: "/metrics"
    type: ClusterIP
    port: 9216
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1
  serviceMonitor:
    enabled: false
    interval: 30s
    additionalLabels: {}
  prometheusRule:
    enabled: false
    additionalLabels: {}
    rules: {}
